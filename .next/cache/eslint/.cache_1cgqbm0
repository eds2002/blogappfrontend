[{"/Users/eduardos/blogCRUD/client/pages/_app.js":"1","/Users/eduardos/blogCRUD/client/pages/about.jsx":"2","/Users/eduardos/blogCRUD/client/pages/admin.js":"3","/Users/eduardos/blogCRUD/client/pages/api/hello.js":"4","/Users/eduardos/blogCRUD/client/pages/blog/all.jsx":"5","/Users/eduardos/blogCRUD/client/pages/blog/create.js":"6","/Users/eduardos/blogCRUD/client/pages/blog/edit/post/[id].js":"7","/Users/eduardos/blogCRUD/client/pages/blog/post/[id].js":"8","/Users/eduardos/blogCRUD/client/pages/index.js":"9","/Users/eduardos/blogCRUD/client/pages/profile/[id].js":"10","/Users/eduardos/blogCRUD/client/pages/user/blogs/index.js":"11","/Users/eduardos/blogCRUD/client/pages/user/bookmarks.js":"12","/Users/eduardos/blogCRUD/client/pages/user/login.js":"13","/Users/eduardos/blogCRUD/client/pages/user/profile/[id].js":"14","/Users/eduardos/blogCRUD/client/pages/user/settings.js":"15","/Users/eduardos/blogCRUD/client/pages/user/signup.js":"16","/Users/eduardos/blogCRUD/client/components/comments/comments.js":"17","/Users/eduardos/blogCRUD/client/components/comments/comments.styles.js":"18","/Users/eduardos/blogCRUD/client/components/editorspicks/editorspicks.js":"19","/Users/eduardos/blogCRUD/client/components/editorspicks/editorspicks.styles.js":"20","/Users/eduardos/blogCRUD/client/components/footer/Footer.jsx":"21","/Users/eduardos/blogCRUD/client/components/footer/Footer.styles.jsx":"22","/Users/eduardos/blogCRUD/client/components/hero/hero.js":"23","/Users/eduardos/blogCRUD/client/components/hero/hero.styles.js":"24","/Users/eduardos/blogCRUD/client/components/index.js":"25","/Users/eduardos/blogCRUD/client/components/latestarticles/latestArticles.js":"26","/Users/eduardos/blogCRUD/client/components/latestarticles/latestArticles.styles.js":"27","/Users/eduardos/blogCRUD/client/components/navbar/Navbar.jsx":"28","/Users/eduardos/blogCRUD/client/components/navbar/Navbar.styles.jsx":"29","/Users/eduardos/blogCRUD/client/components/navbarstudio/navbarstudio.js":"30"},{"size":138,"mtime":1653953405315,"results":"31","hashOfConfig":"32"},{"size":108,"mtime":1653953405316,"results":"33","hashOfConfig":"32"},{"size":5411,"mtime":1653953855800,"results":"34","hashOfConfig":"32"},{"size":170,"mtime":1653953405319,"results":"35","hashOfConfig":"32"},{"size":2795,"mtime":1653953854806,"results":"36","hashOfConfig":"32"},{"size":9955,"mtime":1653953877209,"results":"37","hashOfConfig":"32"},{"size":10780,"mtime":1653953888615,"results":"38","hashOfConfig":"32"},{"size":14245,"mtime":1653954106550,"results":"39","hashOfConfig":"32"},{"size":1085,"mtime":1653953405324,"results":"40","hashOfConfig":"32"},{"size":4182,"mtime":1653954228404,"results":"41","hashOfConfig":"32"},{"size":8479,"mtime":1653954110239,"results":"42","hashOfConfig":"32"},{"size":4921,"mtime":1653954102756,"results":"43","hashOfConfig":"32"},{"size":4317,"mtime":1653954271689,"results":"44","hashOfConfig":"32"},{"size":7713,"mtime":1653954099951,"results":"45","hashOfConfig":"32"},{"size":9109,"mtime":1653954094298,"results":"46","hashOfConfig":"32"},{"size":4726,"mtime":1653954270960,"results":"47","hashOfConfig":"32"},{"size":8330,"mtime":1653954060807,"results":"48","hashOfConfig":"32"},{"size":0,"mtime":1653953432047,"results":"49","hashOfConfig":"32"},{"size":3814,"mtime":1653953432048,"results":"50","hashOfConfig":"32"},{"size":0,"mtime":1653953432048,"results":"51","hashOfConfig":"32"},{"size":84,"mtime":1653953432049,"results":"52","hashOfConfig":"32"},{"size":0,"mtime":1653953432050,"results":"53","hashOfConfig":"32"},{"size":1626,"mtime":1653954074256,"results":"54","hashOfConfig":"32"},{"size":0,"mtime":1653953432052,"results":"55","hashOfConfig":"32"},{"size":410,"mtime":1653953432052,"results":"56","hashOfConfig":"32"},{"size":5002,"mtime":1653953432053,"results":"57","hashOfConfig":"32"},{"size":0,"mtime":1653953432054,"results":"58","hashOfConfig":"32"},{"size":9513,"mtime":1653954087074,"results":"59","hashOfConfig":"32"},{"size":0,"mtime":1653953432055,"results":"60","hashOfConfig":"32"},{"size":2438,"mtime":1653953432056,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mc5rm8",{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eduardos/blogCRUD/client/pages/_app.js",[],[],"/Users/eduardos/blogCRUD/client/pages/about.jsx",[],[],"/Users/eduardos/blogCRUD/client/pages/admin.js",[],[],"/Users/eduardos/blogCRUD/client/pages/api/hello.js",[],[],"/Users/eduardos/blogCRUD/client/pages/blog/all.jsx",[],[],"/Users/eduardos/blogCRUD/client/pages/blog/create.js",[],[],"/Users/eduardos/blogCRUD/client/pages/blog/edit/post/[id].js",["158"],[],"import tw from \"tailwind-styled-components/dist/tailwind\"\nimport { Navbar, NavbarStudio } from \"../../../../components\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faFlag, faBookmark, faTimes, faBoxes, faEyeSlash , faEye} from \"@fortawesome/free-solid-svg-icons\"\nimport {verify, decode} from 'jsonwebtoken'\nimport {useState, useEffect} from 'react'\nimport ReactHtmlParser from 'html-react-parser';\nimport { useRouter } from \"next/router\"\nimport axios from \"axios\"\n\nconst Container = tw.section`\nw-[100vw]\nh-full\nbg-gray-100\n`\n\nconst Layout = tw.div`\nmax-w-[1280px]\nh-full\nmx-auto\np-[15px]\n`\n\nconst Wrapper = tw.div`\nw-full\nh-full\nmd:flex\n`\n\nconst ArticleHeader = tw.div`\nmd:w-[90%]\nw-full\nh-[70vh]\nflex\njustify-center\nitems-start\nflex-col\npb-[100px]\n`\nconst AuthorInformation = tw.div`\nmd:w-[20%]\nw-full\nh-[90vh]\np-[25px]\nbg-gray-100\nmd:flex\njustify-center\nitems-start\nmd:flex-col\n`\nconst TextWrapper = tw.div`\nflex\n`\nconst PublishStatus = tw.div`\nfont-bold\ntext-xs\nflex\nitems-center\ngap-x-3\n`\nconst Tag = tw.div``\nconst Title = tw.textarea`\nmd:text-7xl\ntext-6xl\nfont-bold\nmd:w-[70%]\nw-full\nmy-[10px]\nh-[400px]\nresize-none\nborder-[1px]\nborder-gray-600\nbg-transparent\nhover:ring-2\nhover:ring-indigo-600/50\nfocus:ring-3\nfocus:ring-indigo-600\noutline-none\ntransition\nrounded\n`\nconst AuthorName = tw.div`\nfont-bold\ntext-gray-500\n`\nconst Description = tw.textarea`\ntext-base\ntext-gray-500\nh-[150px]\nw-full\nresize-none\nborder-[1px]\nborder-gray-600\nbg-transparent\nhover:ring-2\nhover:ring-indigo-600/50\nfocus:ring-3\nfocus:ring-indigo-600\noutline-none\ntransition\nrounded\n`\n\n\nconst ArticleBody = tw.div`\nw-full\n`\n\n\nconst ArticleWrapper = tw.div`\nmd:w-[80%]\nw-full\n\n`\n\nconst InfoWrapper = tw.div`\nmt-[35px]\n`\n\nconst AddTextArea = tw.div`\ntext-base\nmd:w-[600px]\nw-[300px]\nw-full\nflex\ngap-x-3\nmb-[100px]\n`\nconst AddParagraph = tw.button`\npy-[10px]\nflex-1\nw-full\nborder-2\nborder-indigo-600\ntext-indigo-900\nrounded-lg\nfont-bold\nbg-indigo-600/10\n`\nconst AddHeading = tw.button`\npy-[10px]\nflex-1\nw-full\nbg-blue-500/10\nborder-2\nborder-blue-500\nfont-bold\ntext-blue-900\nrounded-lg\n`\n\nconst BodyDiv = tw.div`\nrelative\nmd:w-[600px]\nw-full\n`\nconst Input = tw.textarea`\ntext-base\nmd:w-[600px]\nw-[300px]\nw-full\nmy-[10px]\nbg-transparent\noutline-none\n\n\nborder-2\nborder-indigo-600\nhover:ring-2\nhover:ring-indigo-600/25\nfocus:ring-2\nfocus:ring-indigo-600/75\n\n${(p)=> p.type === \"p\" ? \n    `\n    border-2\n    border-indigo-600\n    hover:ring-2\n    hover:ring-indigo-600/25\n    focus:ring-2\n    focus:ring-indigo-600/75\n    bg-indigo-100\n    text-gray-500\n    h-[150px]\n    `\n: \n    `\n    border-2\n    border-blue-600\n    hover:ring-2\n    hover:ring-blue-500/25\n    focus:ring-2\n    focus:ring-blue-500/75\n    bg-blue-100\n    font-bold \n    text-2xl \n    md:w-[600px]\n    h-[75px]\n    `}\n\nfont-normal\nresize-none\ntransition\nrounded-lg\np-[15px]\n`\n\nconst IconClose = tw.div`\nabsolute\ntop-0\nright-0\npt-[15px]\npr-[15px]\ntext-xl\ncursor-pointer\nhover:text-blue-600\ntransition\n`\n\n\nconst Edit = ({user,editBlog}) => {\n    const router = useRouter();\n    useEffect(()=>{\n      let userJWT = localStorage.getItem('accessToken')\n      if(verify(userJWT, 'thisisafakecookie')){\n        const currentUser = decode(userJWT)\n        if(!currentUser.id === editBlog.data[0].user_id){\n          router.push('/404')\n        }\n      }\n    },[])\n\n\n\n    const parseText = JSON.parse(editBlog.data[0].text)\n    const [previousText, setPreviousText] = useState(parseText)\n    const [inputField, setInputField] = useState([])\n    const [title, setTitle] = useState(editBlog.data[0].title)\n    const [notes, setNotes] = useState(editBlog.data[0].author_notes)\n\n    const AddP = () =>{\n        setInputField([...inputField, {textbox: '', type: 'p'}])\n    }\n\n    const AddH = () =>{\n        setInputField([...inputField, {textbox: '', type: 'h'}])\n    }\n    const deleteInput = (index) =>{\n        setInputField(inputField.filter((i, position) => position !== index))\n    }\n\n    const deleteUserText = (position) =>{\n        setPreviousText(previousText.filter((text,index)=> index !== position))\n    }\n\n    const handleInput = (e) =>{\n        const pos = e.target.parentElement.getAttribute('index')\n        const arr = [...inputField]\n        arr[pos].textbox = e.target.value\n        setInputField(arr)\n    }\n\n    const changePreviousText = (index,e) =>{\n      // Changing the previos text from blog that was already created. On change, change the array\n      const arr = [...previousText]\n      arr[index].textbox = e.target.value\n      setPreviousText(arr)\n    }\n\n    const onPost = async () =>{\n        // Variable for empty positons / textboxes\n        const emptyPos = []\n  \n        const body = inputField;\n        \n        if(!title) return // If title is empty return\n        if(!notes) return // If author notes is empty return\n        \n        // Check for boxes that are empty\n        body.forEach((text,index)=>{\n          if(text.textbox === '') emptyPos.push(index)\n        })\n\n  \n\n        setInputField(body.filter((pos) => pos.textbox !== \"\")) // Remove empty boxes \n  \n        const textArr = []\n        inputField.forEach((text)=>{\n          if(text.type == \"p\"){\n            textArr.push({type:'p', textbox: text.textbox}) //Pushing the type (p = paragraph, h = heading) and the textbox\n          }else{\n            textArr.push({type:'h', textbox: text.textbox}) //Pushing the type (p = paragraph, h = heading) and the textbox\n          }\n        })\n        \n        const dbText = JSON.stringify([...previousText,...textArr]); // Combining previous user text with new text if any\n        const blogId = editBlog.data[0].id\n        const dateModified = new window.Date()\n        await axios.patch(`http://localhost:4001/blog/edit/${blogId}`, {\n          text:dbText,\n          title:title,\n          authorNotes:notes,\n          status:1,\n          dateModified, dateModified\n        })\n        .then((result)=>{\n          router.push(`/blog/post/${blogId}`)\n        })\n    }\n\n    const saveDraft = async () =>{ //Save draft, same as onPost function just change status to 0\n      // Variable for empty positons / textboxes\n      const emptyPos = []\n  \n      const body = inputField;\n      \n      if(!title) return // If title is empty return\n      if(!notes) return // If author notes is empty return\n      \n      // Check for boxes that are empty\n      body.forEach((text,index)=>{\n        if(text.textbox === '') emptyPos.push(index)\n      })\n\n\n\n      setInputField(body.filter((pos) => pos.textbox !== \"\")) // Remove empty boxes \n\n      const textArr = []\n      inputField.forEach((text)=>{\n        if(text.type == \"p\"){\n          textArr.push({type:'p', textbox: text.textbox}) //Pushing the type (p = paragraph, h = heading) and the textbox\n        }else{\n          textArr.push({type:'h', textbox: text.textbox}) //Pushing the type (p = paragraph, h = heading) and the textbox\n        }\n      })\n      \n      const dbText = JSON.stringify([...previousText,...textArr]); // Combining previous user text with new text if any\n      const blogId = editBlog.data[0].id\n      const dateModified = new window.Date()\n      await axios.patch(`http://localhost:4001/blog/edit/${blogId}`, {\n        text:dbText,\n        title:title,\n        authorNotes:notes,\n        status:0,\n        dateModified, dateModified\n      })\n      .then((result)=>{\n        router.push(`/blog/post/${blogId}`)\n      })\n    }\n\n  return (\n    <Container>\n      <NavbarStudio onPost = {onPost} saveDraft = {saveDraft}/>\n        <Layout>\n            <Wrapper>\n              <ArticleWrapper>\n                <ArticleHeader>\n                  <TextWrapper>\n                    <PublishStatus>\n                      {editBlog.data[0].status === 0 ? \n                      <>\n                        <FontAwesomeIcon icon = {faEyeSlash} className = \"text-red-500\"></FontAwesomeIcon>\n                        <p className = \"text-red-500\">Current blog is private</p>\n                      </>\n                      :\n                      <>\n                        <FontAwesomeIcon icon = {faEye} className = \"text-green-500\"></FontAwesomeIcon>\n                        <p className = \"text-green-500\">Current blog is public</p>\n                      </> \n                      }\n                    </PublishStatus>  \n                  </TextWrapper>\n                  <Title placeholder = \"Title...\" onChange = {(e)=>setTitle(e.target.value)} value = {title}/>\n                </ArticleHeader>\n                <ArticleBody id = \"article-body\">\n                    {previousText.map((paragraph,index)=>(\n                        <BodyDiv key = {index} index = {index}>\n                            {paragraph.type === \"p\" ? \n                                <Input type = \"p\" onChange = {(e)=>changePreviousText(index,e)} value = {paragraph.textbox}/>\n                            :\n                            <Input type = \"h\" onChange = {(e)=>changePreviousText(index,e)} value = {paragraph.textbox}/>\n                            }\n                            <IconClose onClick = {()=> deleteUserText(index)}>\n                                <FontAwesomeIcon icon = {faTimes} className = \"pointer-events-none\"></FontAwesomeIcon>\n                            </IconClose>\n                        </BodyDiv>\n                    ))}\n                    {inputField.map((input,index)=>(\n                        <BodyDiv key = {index} index = {index}>\n                            <Input type = {input.type} onChange = {(e)=>handleInput(e)}/>\n                            <IconClose onClick = {()=> deleteInput(index)}>\n                                <FontAwesomeIcon icon = {faTimes} className = \"pointer-events-none\"></FontAwesomeIcon>\n                                <p>{index}</p>\n                            </IconClose>\n                        </BodyDiv>\n                    ))}\n                    <AddTextArea>\n                        <AddParagraph onClick = {()=>AddP()}>{`Add Paragraph <p>`}</AddParagraph>\n                        <AddHeading onClick = {()=> AddH()}>{`Add Heading <h3>`}</AddHeading>\n                    </AddTextArea>\n                </ArticleBody>\n              </ArticleWrapper>\n\n\n\n              <AuthorInformation>\n                <InfoWrapper>\n                  <AuthorName>Author Notes:</AuthorName>\n                  <Description value = {notes} onChange = {(e)=>setNotes(e.target.value)}></Description>\n                </InfoWrapper>\n              </AuthorInformation>\n            </Wrapper>\n        </Layout>\n    </Container>\n  )\n}\n\nexport default Edit\n\nexport async function getServerSideProps(context) {\n    const id = context.query\n    const blogRes = await fetch(`http://localhost:4001/blog/${id.id}`)\n    const blogData = await blogRes.json()\n    return{props: {editBlog: blogData}}\n}\n","/Users/eduardos/blogCRUD/client/pages/blog/post/[id].js",["159"],[],"import tw from \"tailwind-styled-components/dist/tailwind\"\nimport { Navbar, Comments } from \"../../../components\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faFlag, faBookmark, faDeleteLeft, faPen, faTimes, faSignIn } from \"@fortawesome/free-solid-svg-icons\"\nimport ReactHtmlParser from 'html-react-parser';\nimport {verify, decode} from 'jsonwebtoken'\nimport {useState, useEffect} from 'react'\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\n\n\nconst Container = tw.section`\nw-[100vw]\nh-full\nbg-gray-100\noverflow-hidden\n`\n\nconst Layout = tw.div`\nmax-w-[1280px]\nh-full\nmx-auto\np-[15px]\noverflow-hidden\n`\n\nconst Wrapper = tw.div`\nw-full\nh-full\nmd:flex\noverflow-hidden\n`\n\nconst ArticleHeader = tw.div`\nmd:w-[100%]\nw-full\nmd:h-[90vh]\nh-[85vh]\nflex\njustify-center\nitems-start\nflex-col\npb-[100px]\n`\nconst AuthorInformation = tw.div`\nw-full\nmd:h-[90vh]\nh-full\nmb-[50px]\nmd:mb-[0px]\np-[5px]\njustify-center\nitems-start\nmd:w-[30%]\nmd:flex\nmd:flex-col\n\n`\nconst TextWrapper = tw.div`\nflex\n`\nconst CreatedDate = tw.div`\ntext-gray-500\nfont-bold\ntext-xs\n`\nconst Tag = tw.div``\nconst Title = tw.div`\nmd:text-7xl\ntext-6xl\nfont-bold\nmd:w-[70%]\nw-full\nmy-[10px]\n`\nconst AuthorName = tw.div`\nfont-bold\ntext-gray-500\n`\nconst Description = tw.div`\ntext-base\ntext-gray-500\n`\n\n\nconst ArticleBody = tw.div`\nw-full\n`\n\n\nconst ArticleWrapper = tw.div`\nmd:w-[80%]\nw-full\n\n`\n\nconst Paragraph = tw.p`\ntext-gray-500 \nmd:w-[600px] \nmd:text-xl\ntext-base \nmy-[30px] \nw-full\n`\n\n\nconst Buttons = tw.div`\nw-full\n`\n\nconst Bookmark = tw.button`\nw-full\nrounded-lg\nbg-indigo-600\ntext-white\npy-[10px]\nmy-[20px]\nflex\ngap-x-3\nitems-center\njustify-center\nhover:bg-indigo-700\nactive:bg-transparent\nactive:text-indigo-600\nborder-2\nborder-indigo-600\ntransition\n`\n\nconst InfoWrapper = tw.div`\nmt-[35px]\n`\n\nconst Author = tw.p`\nfont-bold\ntext-xl\n`\n\nconst MeetAuthor = tw.div`\nflex\nmd:w-[600px]\nsm:h-[200px]\nh-[300px]\nmt-[10px]\nmb-[50px]\ngap-x-3\nbg-gray-300\np-[15px]\nrounded-xl\nshadow\nhover:shadow-xl\ntransition\ncursor-pointer\n`\n\nconst AuthorImage = tw.div`\nw-[200px]\nh-full\nbg-gray-500\nrounded-lg\n`\n\nconst AuthorPersonal = tw.div`\nflex-1\nw-full\n`\n\nconst AuthorDescription = tw.p`\nfont-gray-500\nmd:text-base\ntext-base\n`\n\nconst Name = tw.h1`\nfont-bold\ntext-xl\n\n`\n\nconst MeetAuthorHeading = tw.p`\nfont-bold\ntext-3xl\nmt-[100px]\n`\n\nconst DeletePost = tw.div`\nw-full\nrounded-lg\nbg-red-600\ntext-white\npy-[10px]\nmy-[20px]\nflex\ngap-x-3\nitems-center\njustify-center\nhover:bg-red-700\nactive:bg-transparent\nactive:text-red-600\nborder-2\nborder-red-600\ntransition\ncursor-pointer\n`\n\nconst EditPost = tw.div`\nw-full\nrounded-lg\nbg-slate-600\ntext-white\npy-[10px]\nmy-[20px]\nflex\ngap-x-3\nitems-center\njustify-center\nhover:bg-slate-700\nactive:bg-transparent\nactive:text-slate-600\nborder-2\nborder-slate-600\ntransition\ncursor-pointer\n`\n\nconst DeleteModal = tw.div`\nfixed\ntop-0\nbottom-0\nleft-0\nright-0\nbg-black/25\nz-[99999999999999999999999999999999]\nflex\nitems-center\njustify-center\n`\n\nconst DelWrapper = tw.div`\nbg-white\np-[50px]\nrounded-xl\n`\nconst TextH1 = tw.h1`\ntext-center\ntext-3xl\nfont-bold\n`\nconst TextP = tw.div`\nw-[30ch]\ntext-center\n`\n\nconst DelBtnWrapper = tw.div`\nflex\nw-full\ngap-x-3\nmt-[15px]\n`\n\nconst DelButton = tw.button`\nflex-1\nw-full\nbg-red-500\nrounded-lg\npy-[10px]\nfont-bold\ntext-white\nborder-2\nborder-red-500\nhover:bg-red-600\nactive:bg-transparent\nactive:text-red-500\n`\nconst CloseBtn = tw.button`\nflex-1\nw-full\nbg-slate-500\nrounded-lg\npy-[10px]\nfont-bold\ntext-white\nborder-2\nborder-slate-500\nhover:bg-slate-600\nactive:bg-transparent\nactive:text-slate-500\n`\n\nconst Heading = tw.h3`\nfont-bold \ntext-2xl \nmd:w-[600px]\n`\n\nconst SignupModal = tw.div`\nfixed\ntop-0\nleft-0\nright-0\nbottom-0\nbg-black/50\nflex\nitems-center\njustify-center\nz-[9999999999999999999999999999999999999999]\n`\nconst SignupModalWrapper = tw.div`\nw-full\nmx-[15px]\nmax-w-[600px]\nh-[300px]\nrelative\nbg-white\nflex\njustify-center\nitems-center\nflex-col\ngap-y-5\nrelative\nrounded-xl\n`\nconst SignUpHeading = tw.h1`\nmd:text-3xl\ntext-xl\nfont-bold\n`\nconst SignUpButton = tw.button`\npy-[10px]\npx-[15px]\nw-full\nmax-w-[300px]\nbg-indigo-600\ntext-white\nrounded-lg\nborder-2\nborder-indigo-600\nhover:bg-indigo-700\nactive:bg-transparent\nactive:text-indigo-600\nflex\njustify-center\nitems-center\ngap-x-3\n`\nconst CloseSignUp = tw.div`\nabsolute\ntop-0\nright-0\nm-[20px]\np-[5px]\ncursor-pointer\n`\n\n\nconst Post = ({id,comments, userBookmark}) => {\n  const router = useRouter();\n\n  const [user, setUser] = useState(null);\n  const [logged, setLogged] = useState(false);\n  const [bookmarkData, setBookmarkData] = useState();\n  const [userBookmarked, setUserBookmarked] = useState(false)\n  const [bookmarkId, setBookmarkId] = useState()\n  useEffect(()=>{\n    let userJWT = localStorage.getItem('accessToken')\n    if(userJWT){\n      if(verify(userJWT, 'thisisafakecookie')){\n        setUser(decode(userJWT))\n        setLogged(true)\n      }\n      async function fetchData() {\n        const currentUser = decode(localStorage.getItem('accessToken'))\n        const userBookmark = await fetch(`http://localhost:4001/bookmarks/${id.data[0].id}/${userJWT.id}`)\n        const userBookmarkData = await userBookmark.json()\n        setBookmarkId(userBookmarkData.result.length === 0 ? null : userBookmarkData.result[0].id)\n        setUserBookmarked(userBookmarkData.result.length === 0 ? false : userBookmarkData.result.some(id => id.user_id === currentUser.id))\n        setBookmarkData(userBookmarkData)\n      }\n      fetchData()\n    }\n  },[])\n  console.log(userBookmarked)\n\n\n  const parseText = JSON.parse(id.data[0].text)\n  \n  // If a user exists (if mysql returns an empty array, the user hasn't bookmarked this page, else the user did bookmark), if no user set to null\n  const [delModal, setDelModal] = useState(false)\n  const [registerModal, setRegisterModal] = useState(false)\n\n\n\n\n  // Setting current user for components\n  let currentUser = {};\n  if(!user){\n    currentUser={\n      id:null,\n      role:null,\n    }\n  }else{\n    currentUser = {\n      id:user.id,\n      role:user.role\n    }\n  }\n\n\n  // Deleting the post\n  const handleDelete = async () =>{\n    const postId = id.data[0].id\n\n\n    await axios.delete(`http://localhost:4001/blog/delete/${postId}`)\n    router.push('/')\n  }\n\n  \n  const addToBookmarks = async () =>{\n    // If user is not logged, do not run function\n    if(currentUser.role === null){\n      setRegisterModal(!registerModal)\n      return;\n    }\n\n\n    // If user has not bookmarked this page, then apply logic to add the bookmark to user\n    if(!userBookmarked){\n      const userId = currentUser.id\n      const blogId = id.data[0].id\n      const time = new window.Date()\n      await axios.post('http://localhost:4001/bookmarks/add',{\n        userId:userId,\n        blogId:blogId,\n        time:time,\n      })\n        .then((res)=>{\n          setUserBookmarked(true)\n          setBookmarkId(res.data.result.insertId) \n        })\n      return;\n    }\n\n      // Apply logic to remove bookmark from users bookmarks\n      await axios.delete(`http://localhost:4001/bookmarks/delete/${bookmarkId}`)\n        .then((res)=>{\n          setUserBookmarked(false)\n        })\n  }\n\n  const editPost = async (id) =>{\n    router.push(`/blog/edit/post/${id}`)\n  } \n\n  const takeToSignUp = () =>{\n    router.push('/user/signup')\n  }\n\n\n  return (\n    <Container>\n      <Navbar page = \"post\" signed = {logged} user = {user}/>\n        <Layout>\n            <Wrapper>\n              <ArticleWrapper>\n                <ArticleHeader>\n                  <TextWrapper>\n                    <CreatedDate>{new Date(id.data[0].date_created).toLocaleDateString()}</CreatedDate>\n                  </TextWrapper>\n                  <Title>{id.data[0].title}</Title>\n                </ArticleHeader>\n                <ArticleBody>\n                    {parseText.map((paragraph)=>(\n                      <>{paragraph.type === \"p\" ? \n                        <Paragraph>{paragraph.textbox}</Paragraph>\n                      :\n                        <Heading>{paragraph.textbox}</Heading>\n                      }</>\n                    ))}\n                </ArticleBody>\n                {/* <MeetAuthorHeading>Meet the author</MeetAuthorHeading>\n                <MeetAuthor>\n                  <AuthorImage></AuthorImage>\n                  <AuthorPersonal>\n                    <Name>Eduardo Sanchez</Name>\n                    <AuthorDescription>Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae cumque accusantium, exercitationem nobis omnis saepe soluta praesentium pariatur aliquid dicta quaerat ab magnam velit accusamus aliquam rem, quae voluptatibus in!</AuthorDescription>\n                  </AuthorPersonal>\n                </MeetAuthor> */}\n              </ArticleWrapper>\n\n\n              <AuthorInformation>\n                <InfoWrapper>\n                  <AuthorName>Author Notes:</AuthorName>\n                  <Description>\n                    {id.data[0].author_notes}\n                  </Description>\n                </InfoWrapper>\n                <Buttons>\n                  <Bookmark onClick = {()=>addToBookmarks()}>\n                    <FontAwesomeIcon icon = {faBookmark}></FontAwesomeIcon>\n                    {userBookmarked ? \"Remove from bookmarks\" : \"Add to bookmarks\"}\n                  </Bookmark>\n                  {currentUser.role === \"admin\" || currentUser.id=== id.data[0].user_id ?\n                    <>\n                      {currentUser.id === id.data[0].user_id &&\n                        <EditPost onClick = {()=>editPost(id.data[0].id)}>\n                          <FontAwesomeIcon icon = {faPen}></FontAwesomeIcon>\n                          Edit Post\n                        </EditPost>\n                      }\n                      <DeletePost onClick = {()=>setDelModal(!delModal)}>\n                        <FontAwesomeIcon icon = {faDeleteLeft}></FontAwesomeIcon>\n                        Delete post\n                      </DeletePost>\n                    </>\n                  :\n                    \"\"\n                  }\n                </Buttons>\n              </AuthorInformation>\n\n\n\n              {delModal && (\n              <DeleteModal>\n                <DelWrapper>\n                  <TextH1>Before you delete.</TextH1>\n                  <TextP>You are about to delete {user.id === id.data[0].user_id ? \"your own\" : `${user.firstName} ${user.lastName}'s`} post, are you sure you want to do this?</TextP>\n                  <DelBtnWrapper>\n                    <CloseBtn onClick = {()=>setDelModal(!delModal)}>\n                      Nevermind\n                    </CloseBtn>\n                    <DelButton onClick = {()=>handleDelete()}>\n                      Delete post\n                    </DelButton>\n                  </DelBtnWrapper>\n                </DelWrapper>\n              </DeleteModal>\n              )}\n              {registerModal && (\n                <SignupModal>\n                  <SignupModalWrapper>\n                    <SignUpHeading>Enjoy the full experience at Blog!</SignUpHeading>\n                    <SignUpButton onClick = {()=>takeToSignUp()}>\n                      <FontAwesomeIcon icon = {faSignIn}></FontAwesomeIcon>\n                      Sign up\n                    </SignUpButton>\n                    <CloseSignUp onClick = {()=>setRegisterModal(!registerModal)}>\n                      <FontAwesomeIcon icon = {faTimes}></FontAwesomeIcon>\n                    </CloseSignUp>\n                  </SignupModalWrapper>\n                </SignupModal>\n              )\n              }\n            </Wrapper>\n            <Comments blogData = {id} user = {user} comments = {comments} />\n        </Layout>\n    </Container>\n  )\n}\n\nexport default Post\n\n\nexport async function getServerSideProps(context){\n   // Get the id from url \n  const { id } = context.query;\n\n  // Fetch blog id to load onto page\n  const blogRes = await fetch(`http://localhost:4001/blog/${id}`)\n  const blogData = await blogRes.json()\n\n  // Fetch comments from blog id\n  const commentRes = await fetch(`http://localhost:4001/comments/blog/${id}`)\n  const commentData = await commentRes.json()\n\n\n  // If blog data receives null, redirect, no page exists\n  if(blogData.error === null){\n    return {\n      redirect: {\n        permanent: false,\n        destination: \"/404\",\n      },\n      props:{},\n    };\n  } \n  return {props:{comments:commentData, id:blogData}}\n}\n\n\n// export async function getServerSideProps(context) {\n//   // Get the id from url \n//   const { id } = context.query;\n\n//   // Fetch blog id to load onto page\n//   const blogRes = await fetch(`http://localhost:4001/blog/${id}`)\n//   const blogData = await blogRes.json()\n\n//   // Fetch comments from blog id\n//   const commentRes = await fetch(`http://localhost:4001/comments/blog/${id}`)\n//   const commentData = await commentRes.json()\n\n\n//   // If blog data receives null, redirect, no page exists\n//   if(blogData.error === null){\n//     return {\n//       redirect: {\n//         permanent: false,\n//         destination: \"/404\",\n//       },\n//       props:{},\n//     };\n//   }\n\n\n\n//   // Checking if jwt is valid\n//   const jwt = context.req.cookies.userToken;\n//   try{\n//     // Verify user token\n//     verify(jwt, process.env.JWT_SECRET)\n//     const userId = decode(jwt)\n//     // Check if status is published or not published, if user matches blogId, allow user to view post, other users cannot view post\n//     if(blogData.data[0].user_id != userId.id && blogData.data[0].status === 0){\n//       return {\n//         redirect: {\n//           permanent: false,\n//           destination: \"/404\",\n//         },\n//         props:{},\n//       };\n//     }\n\n//     // Once token is valid, fetch bookmarks to check if user has bookmarked this page\n//     const bookmark = await fetch(`http://localhost:4001/bookmarks/${id}/${userId.id}`)\n//     const bookmarkData = await bookmark.json()\n\n//     // Return all data\n//     return {props: {user:decode(jwt),logged:true, id:blogData, comments: commentData, userBookmark: bookmarkData}}\n//   }catch(error){\n//     if(blogData.data[0].status ===0){\n//       return {\n//         redirect: {\n//           permanent: false,\n//           destination: \"/404\",\n//         },\n//         props:{},\n//       };\n//     }\n//     return {props: {id:blogData, comments: commentData}}\n//   }\n// }","/Users/eduardos/blogCRUD/client/pages/index.js",[],[],"/Users/eduardos/blogCRUD/client/pages/profile/[id].js",[],[],"/Users/eduardos/blogCRUD/client/pages/user/blogs/index.js",["160"],[],"import tw from 'tailwind-styled-components/dist/tailwind'\nimport { Navbar } from '../../../components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDeleteLeft, faEye, faEyeSlash, faEdit, faCircle, faTimes, faPen } from '@fortawesome/free-solid-svg-icons'\nimport {verify, decode} from 'jsonwebtoken'\nimport {useState,useEffect} from 'react'\nimport {useRouter} from 'next/router'\nimport axios from 'axios'\n\nconst Container = tw.section`\nw-[100vw]\nrelative\nz-[909999]\nbg-gray-100\nh-full\n`\n\nconst Layout = tw.div`\nmax-w-[1280px]\nh-full\nmx-auto\npx-[15px]\n`\n\nconst Wrapper = tw.div`\nw-full\nh-full\n`\n\nconst Heading = tw.h1`\ntext-5xl\nfont-bold\npt-[25px]\npb-[50px]\n`\n\nconst AllUserBlogs = tw.h1`\ntext-xl\nfont-bold\npy-[10px]\n`\n\nconst BlogCard = tw.div`\nbg-gray-200\nrounded-xl\np-[25px]\nmd:grid\nsm:grid-cols-5\nflex\nflex-col\nmy-[25px]\nshadow-lg\ngap-y-5\n\n`\n\nconst Flex = tw.div`\nflex\nflex-col\nh-[500px]\nw-full\nmb-[100px]\n`\n\nconst Title = tw.h1`\nfont-bold\ntext-xl\ncol-start-1\ncol-end-2\ncursor-pointer\nhover:text-indigo-600\ntransition\nflex\nitems-center\njustify-self-start\n`\n\n\nconst Status = tw.div`\ntext-gray-500\ncol-start-2\ncol-end-3\nflex\nitems-center\nmd:justify-center\ngap-x-3\n`\n\nconst Created = tw.p`\ntext-gray-500\ncol-start-3\ncol-end-4\nmd:flex\nhidden\nitems-center\njustify-center\n`\n\nconst Modified = tw.p`\ntext-gray-500\ncol-start-4\ncol-end-5\nmd:flex\nhidden\nitems-center\njustify-center\n\n`\n\nconst Actions = tw.div`\ncol-start-5\ncol-end-6\nflex\nitems-center\njustify-center\njustify-between\n`\n\nconst Delete = tw.button`\nflex\nflex-col\nitems-center\njustify-center\ntext-gray-400\nhover:text-gray-600\ntransition\n`\n\nconst Unpublish = tw.button`\nflex\nflex-col\nitems-center\njustify-center\ntext-gray-400\nhover:text-gray-600\ntransition\n`\nconst Edit = tw.button`\nflex\nflex-col\nitems-center\njustify-center\ntext-gray-400\nhover:text-gray-600\ntransition\n`\n\nconst IconStatus = tw.div`\ntext-xs\ntext-green-500\n${(p)=> p.published === \"true\" ? \"text-green-500\" : \"text-red-500\"}\n`\n\nconst WarningContainer = tw.div`\nfixed\ntop-0\nleft-0\nbottom-0\nright-0\nz-[9999999999999999]\nbg-black/50\nflex\nitems-center\njustify-center\n`\nconst WarningWrapper = tw.div`\nbg-white\nrounded-xl\np-[50px]\nflex\njustify-center\nitems-center\nflex-col\ngap-y-3\n`\nconst DeleteHeading = tw.h2`\nfont-bold\ntext-xl\n`\nconst DeleteText = tw.p`\ntext-lg\ntext-gray-500\n`\n\nconst ButtonsWrapper = tw.div`\nflex\ngap-x-2\nmt-[10px]\n`\n\nconst DeleteButton = tw.button`\nbg-red-500\npy-[10px]\npx-[20px]\nrounded-xl\ntext-white\nflex\nitems-center\njustify-center\ngap-x-3\nborder-2\nborder-red-500\nhover:bg-red-600\nactive:bg-transparent\nactive:text-red-500\ntransition\n`\nconst CancelButton = tw.button`\nbg-slate-500\npy-[10px]\npx-[20px]\nrounded-xl\ntext-white\nflex\nitems-center\njustify-center\ngap-x-3\nborder-2\nborder-slate-500\nhover:bg-slate-600\nactive:bg-transparent\nactive:text-slate-500\ntransition\n`\n\nconst NoBlogs = tw.div`\nh-full\nflex\nitems-center\njustify-center\nflex-col\n`\nconst NoBlogsText = tw.div`\ntext-2xl\nfont-bold\n`\nconst NoBlogsCreateBtn = tw.div`\nbg-indigo-600\ntext-white\npy-[10px]\npx-[25px]\nmax-w-[250px]\nrounded-lg\nflex\nitems-center\njustify-center\ngap-x-3\nmy-[10px]\ncursor-pointer\nborder-2\nborder-indigo-600\nhover:bg-indigo-700\nactive:bg-transparent\nactive:text-indigo-600\n`\n\n\n\nconst UserBlogs = () => {\n  const router = useRouter()\n\n  const [user, setUser] = useState({});\n  const [logged, setLogged] = useState(false);\n  const [blogsArray, setBlogsArr] = useState([])\n  useEffect(()=>{\n    let userJWT = localStorage.getItem('accessToken')\n    if(verify(userJWT, 'thisisafakecookie')){\n      setUser(decode(userJWT))\n      setLogged(true)\n    }else{\n      router.push('/404')\n    }\n    const fetchData = async () =>{\n      const currentUser = decode(localStorage.getItem('accessToken'))\n      const userBlogsRes = await fetch(`http://localhost:4001/blog/all/${currentUser.id}`);\n      const userBlogsData = await userBlogsRes.json()\n      setBlogsArr(userBlogsData.result)\n    }\n    fetchData();\n  },[])\n\n\n  const [warningModal, setWarningModal] = useState(false)\n\n  const redirectToBlog = (blogId) =>{\n    router.push(`/blog/post/${blogId}`)\n  }\n\n  const deleteBlog = (blogId) =>{\n\n  }\n\n  const editBlog = (blogId) => {\n    router.push(`/blog/edit/post/${blogId}`)\n  }\n\n  const changeBlogStatus = async (blogId, status,index) =>{\n    // If current status is true/ x>=1 (PUBLISHED), add logic to update status to 0 or false\n    if(status >= 1){\n      await axios.patch(`http://localhost:4001/blog/status/${blogId}/0`)\n        .then((res)=>{\n          blogsArray[index].status = 0\n          setBlogsArr([...blogsArray])\n        })\n    }else{\n      // Update status to true, published\n      await axios.patch(`http://localhost:4001/blog/status/${blogId}/1`)\n        .then((res)=>{\n          blogsArray[index].status = 1\n          setBlogsArr([...blogsArray])\n        })\n    }\n  }\n\n  const createBlog = () =>{\n    router.push('/blog/create')\n  }\n\n  return (\n    <Container>\n      <Navbar signed = {logged} user = {user}/>\n      <Layout>\n        <Wrapper>\n          <Heading>Hi {user.firstName}!</Heading>\n          <AllUserBlogs>My blogs</AllUserBlogs>\n          <Flex>\n            {blogsArray.length === 0 && (\n              <NoBlogs>\n                <NoBlogsText>You have no blogs!</NoBlogsText>\n                <NoBlogsCreateBtn onClick = {()=>createBlog()}>\n                  <FontAwesomeIcon icon = {faPen}></FontAwesomeIcon>\n                  Create your first blog.\n                </NoBlogsCreateBtn>\n              </NoBlogs>\n            )}\n            {blogsArray.map((blog,index)=>(\n              <BlogCard key = {index}>\n                <Title onClick = {()=>redirectToBlog(blog.id)}>{blog.title}</Title>\n                  <Status>\n                    {blog.status === 1 ? \n                      <>\n                        <IconStatus published = \"true\">\n                          <FontAwesomeIcon icon = {faCircle}></FontAwesomeIcon>\n                        </IconStatus>\n                        Published\n                      </>\n                    :\n                      <>\n                        <IconStatus published = \"false\">\n                          <FontAwesomeIcon icon = {faCircle}></FontAwesomeIcon>\n                        </IconStatus>\n                        Unpublished\n                      </>\n                    }\n                  </Status>\n                  <Created>{new Date(blog.date_created).toLocaleDateString()}</Created>\n                  <Modified>{blog.date_modified === null ? \"N/A\" : new Date(blog.date_modified).toLocaleDateString ()}</Modified>\n                <Actions>\n                  <Delete onClick = {()=> setWarningModal(!warningModal)}>\n                    <FontAwesomeIcon icon = {faDeleteLeft}></FontAwesomeIcon>\n                    Delete\n                  </Delete>\n                  <Unpublish onClick = {()=>changeBlogStatus(blog.id,blog.status, index)}>\n                    {blog.status === 1 ? \n                      <>\n                        <FontAwesomeIcon icon = {faEyeSlash}></FontAwesomeIcon>\n                        Unpublish\n                      </>\n                    :\n                      <>\n                        <FontAwesomeIcon icon = {faEye}></FontAwesomeIcon>\n                        Publish\n                      </>  \n                    }\n                  </Unpublish>\n                  <Edit onClick = {()=>editBlog(blog.id)}>\n                    <FontAwesomeIcon icon = {faEdit}></FontAwesomeIcon>\n                    Edit\n                  </Edit>\n                </Actions>\n              </BlogCard>\n            ))}\n            {warningModal && (\n              <WarningContainer>\n                <WarningWrapper>\n                  <DeleteHeading>You are about to delete a post.</DeleteHeading>\n                  <DeleteText>Are you sure you want to do this?</DeleteText>\n                  <ButtonsWrapper>\n                    <DeleteButton>\n                      <FontAwesomeIcon icon = {faDeleteLeft}></FontAwesomeIcon>\n                      Delete post\n                    </DeleteButton>\n                    <CancelButton onClick = {()=> setWarningModal(!warningModal)}>\n                      <FontAwesomeIcon icon = {faTimes}></FontAwesomeIcon>\n                      Nevermind\n                    </CancelButton>\n                  </ButtonsWrapper>\n                </WarningWrapper>\n              </WarningContainer>\n            )}\n          </Flex>\n        </Wrapper>\n      </Layout>\n    </Container>\n  )\n}\n\nexport default UserBlogs\n","/Users/eduardos/blogCRUD/client/pages/user/bookmarks.js",["161"],[],"import tw from \"tailwind-styled-components/dist/tailwind\"\nimport { Navbar } from \"../../components\"\nimport { verify, decode } from 'jsonwebtoken'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faBinoculars, faBook, faDeleteLeft, faGlasses } from \"@fortawesome/free-solid-svg-icons\"\nimport axios from \"axios\"\nimport {useState, useEffect} from 'react'\nimport { useRouter } from \"next/router\"\n\nconst Container = tw.section`\nw-[100vw]\nh-full\nbg-gray-100\n`\n\nconst Layout = tw.div`\nmax-w-[1280px]\nh-full\nmx-auto\np-[15px]\n`\n\nconst Wrapper = tw.div`\nw-full\n`\n\nconst PageHeading = tw.h1`\ntext-3xl\nfont-bold\nmt-[50px]\n`\n\nconst BookmarksGrid = tw.div`\nw-full\nh-[600px]\nbg-gray-200/50\nrounded-xl\nmt-[25px]\nmb-[50px]\ngrid\nlg:grid-cols-3\nsm:grid-cols-2\ngrid-cols-1\noverflow-scroll\n`\n\nconst BookmarkCard = tw.div`\nrounded-lg\nbg-gray-200\nflex\nflex-col\nh-[250px]\np-[25px]\njustify-between\nm-[25px]\nshadow-xl\ntransition\n`\nconst BookmarkTitle = tw.h3`\nfont-bold\ntext-xl\nh-[125px]\noverflow-scroll\n`\nconst BookmarkDate = tw.p`\ntext-gray-500\n`\nconst DeleteBookmark = tw.button`\nbg-indigo-600\npy-[10px]\nflex\nitems-center\njustify-center\nrounded-lg\ntext-white\ngap-x-3\nborder-2\nborder-indigo-600\nhover:bg-indigo-700\nactive:bg-transparent\nactive:text-indigo-600\n`\n\nconst NoBookmarks = tw.div`\nflex\nflex-col\nitems-center\njustify-center\nw-full\ncol-span-6\n`\nconst NoBookmarksText = tw.p`\ntext-gray-700\ntext-2xl\ntext-center\nfont-bold\n`\nconst NoBookmarksButton = tw.button`\nbg-indigo-600\ntext-white\npy-[10px]\npx-[25px]\nrounded-lg\nmy-[12px]\ncursor-pointer\nborder-2\nborder-indigo-600\nhover:bg-indigo-700\nactive:bg-transparent\nactive:text-indigo-600\nflex\nitems-center\njustify-center\ngap-x-3\n`\n\nconst Bookmarks = () => {\n  \n  const router = useRouter()\n  const [user, setUser] = useState({});\n  const [logged, setLogged] = useState(false);\n  const [bookmarksArr, setBookmarksArr] = useState()\n\n  useEffect(()=>{\n    let userJWT = localStorage.getItem('accessToken')\n    if(verify(userJWT, 'thisisafakecookie')){\n      setUser(decode(userJWT))\n      setLogged(true)\n    }else{\n      router.push('/404')\n    }\n\n    const fetchData = async () =>{\n      const currentUser = decode(localStorage.getItem('accessToken'))\n      // Fetch bookmarks\n      const bookmarkRes = await fetch(`http://localhost:4001/bookmarks/${currentUser.id}`)\n      const bookmarkData = await bookmarkRes.json()\n      let result = bookmarkData.result.map(bookmark => ({ id: bookmark.blog_id}));\n      const arrData = JSON.stringify(result)\n        \n      // Fetch blogs\n      const blogsRes = await fetch(`http://localhost:4001/blog/getall/${arrData}`)\n      const blogsData = await blogsRes.json()\n      setBookmarksArr(blogsData.result)\n      console.log(blogsData)\n    }\n    fetchData()\n  },[])\n\n\n  const removeBookmark = async (id) =>{\n    // Update usestate by using filter to remove necessary obj\n    setBookmarksArr(bookmarksArr.filter(arr => arr.id != id))\n    await axios.delete(`http://localhost:4001/bookmarks/remove/${id}`)\n      .then((res)=>{\n      })\n  }\n\n  const goToBlog = (id) =>{\n    router.push(`/blog/post/${id}`)\n  }\n\n  const goToAllBlogs = () =>{\n    router.push('/blog/all')\n  }\n\n  return (\n    <Container>\n        <Navbar signed = {logged} user = {user} page = \"bookmarks\"/>\n        <Layout>\n            <Wrapper>\n              <PageHeading>My Bookmarks</PageHeading>\n              <BookmarksGrid className = \"scrollbar\">\n                {!bookmarksArr || bookmarksArr.length === 0 ? \n                  <NoBookmarks>\n                    <NoBookmarksText>You have no bookmarks!</NoBookmarksText>\n                    <NoBookmarksButton onClick = {()=> goToAllBlogs()}>\n                      <FontAwesomeIcon icon = {faBook}></FontAwesomeIcon>\n                      Read some blogs\n                    </NoBookmarksButton>\n                  </NoBookmarks>\n                :\n                  bookmarksArr.map((blog,key)=>(\n                    <>\n                      {blog.status != 0 && (\n                        <BookmarkCard key = {key}>\n                          <BookmarkDate>@{blog.author_username}</BookmarkDate>\n                          <BookmarkTitle className = \"scrollbar\">\n                            <p className = \"transition cursor-pointer hover:text-indigo-600\"onClick = {()=>goToBlog(blog.id)}>\n                              {blog.title}\n                            </p>\n                          </BookmarkTitle>\n                          <DeleteBookmark onClick = {()=>removeBookmark(blog.id)}>\n                            <FontAwesomeIcon icon = {faDeleteLeft}></FontAwesomeIcon>\n                            Delete Bookmark\n                          </DeleteBookmark>\n                        </BookmarkCard>\n                      )}\n                    </>\n                  ))\n                }\n              </BookmarksGrid>\n            </Wrapper>\n        </Layout>\n    </Container>\n  )\n}\n\nexport default Bookmarks\n","/Users/eduardos/blogCRUD/client/pages/user/login.js",["162"],[],"/Users/eduardos/blogCRUD/client/pages/user/profile/[id].js",[],[],"/Users/eduardos/blogCRUD/client/pages/user/settings.js",["163"],[],"import { decode, verify } from \"jsonwebtoken\"\nimport tw from \"tailwind-styled-components/dist/tailwind\"\nimport { Navbar } from \"../../components\"\nimport {useState, useEffect} from 'react'\nimport axios from \"axios\"\nimport { useRouter } from \"next/router\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faDeleteLeft } from \"@fortawesome/free-solid-svg-icons\"\nconst Container = tw.section`\nw-[100vw]\nh-[100vh]\n`\n\nconst Layout = tw.div`\nmax-w-[1280px]\nh-full\nmx-auto\np-[15px]\n`\n\nconst Wrapper = tw.div`\nw-full\nh-full\n`\nconst UserTop = tw.div`\nbg-indigo-200/50\nw-full\nrounded-xl\np-[25px]\nflex\njustify-between\n`\nconst UserTopWrapper = tw.div`\n\n`\nconst UserTopHeading = tw.h1`\nfont-bold\ntext-2xl\n`\nconst UserTopEmail = tw.p`\ntext-gray-500\ntext-xs\n`\nconst UserTopViewProfile = tw.button`\nbg-indigo-600\nrounded-lg\npx-[20px]\ntext-white\nhover:bg-indigo-700\n`\nconst Settings = tw.div`\nw-full\nmy-[50px]\nflex\nflex-col\ngap-y-10\n`\nconst SettingsBox = tw.div`\nflex\nflex-col\ngap-y-10\n`\nconst SettingsPassHeader = tw.h1`\nfont-bold\ntext-xl\nmt-[20px]\n`\nconst SettingsPassDescription = tw.p`\ntext-[15px]\nmb-[10px]\ntext-gray-500\n`\nconst CurrentPassword = tw.input`\nrounded-lg\nborder-2\nborder-gray-500\nbg-transparent\npx-[5px]\npy-[10px]\noutline-none\nmd:ml-auto\nmd:self-end\n`\nconst Username = tw.input`\nrounded-lg\nborder-2\nborder-gray-500\nbg-transparent\npx-[5px]\npy-[10px]\n`\nconst NameWrapper = tw.div`\nflex\ngap-x-3\njustify-center\n`\nconst FirstName = tw.input`\nrounded-lg\nborder-2\nborder-gray-500\nbg-transparent\npx-[5px]\npy-[10px]\nmd:ml-auto\nmd:self-end\n`\nconst LastName = tw.input`\nrounded-lg\nborder-2\nborder-gray-500\nbg-transparent\npx-[5px]\npy-[10px]\nmd:ml-auto\nmd:self-end\n`\nconst DeleteAccount = tw.button`\nw-full\nbg-red-500\ntext-white\nmt-[15px]\npy-[15px]\nrounded-lg\nhover:bg-red-600\nactive:bg-red-700\n`\n\nconst UsernameHeading = tw.h1`\nfont-bold\ntext-xl\n`\nconst NameHeading = tw.h1`\nfont-bold\ntext-xl\nmt-[25px]\nh-full\n`\n\nconst SettingsWrapper = tw.div`\nflex\nflex-col\nmd:flex-row\nmd:items-center\nmd:justify-between\n`\n\nconst PassTextWrapper = tw.div`\nflex\nitems-start\njustify-center\nflex-col\n`\n\nconst ButtonsWrapper = tw.div`\nmd:w-[50%]\nflex\ngap-x-3\nml-auto\n`\n\nconst SaveChanges = tw.button`\nw-full\nbg-indigo-600\ntext-white\nmt-[15px]\npy-[15px]\nrounded-lg\nhover:bg-indigo-700\nactive:bg-indigo-800\ndisabled:bg-gray-500\ndisabled:text-gray-300\npx-[15px]\n`\n\nconst UsernameError = tw.span`\ntext-xs\n${(p)=> p.error === \"true\" ? \"text-red-500\":\"text-green-500\"}\n`\n\nconst FlexCol = tw.div`\nflex\nflex-col\n`\n\nconst FlexRow = tw.div`\nw-full\nflex\nitems-center\njustify-between\n`\n\nconst DeleteConfirmation = tw.div`\nfixed\ntop-0\nbottom-0\nright-0\nleft-0\nbg-black/50\nz-[999999999999999999999999999999999]\nflex\njustify-center\nitems-center\n`\nconst DeleteConfirmationWrapper = tw.div`\nmax-w-[500px]\nw-full\nbg-white\np-[25px]\nmx-[15px]\nrounded-lg\nflex\njustify-center\nitems-center\nh-[225px]\nflex-col\n`\nconst DeleteHeading = tw.h1`\nfont-bold\ntext-xl\ntext-center\n`\nconst DeleteButton = tw.button`\nbg-red-500\npy-[10px]\npx-[20px]\ntext-white\nrounded-lg\nflex\nitems-center\njustify-center\ngap-x-3\nmt-[30px]\nborder-2\nborder-red-500\nhover:bg-red-600\nactive:bg-transparent\nactive:text-red-500\n`\n\n\n\nconst UserSettings = ({currentUser}) => {\n    const router = useRouter();\n\n    const [user, setUser] = useState({});\n    const [logged, setLogged] = useState(false);\n    const [firstName, setFirstName] = useState()\n    const [lastName, setLastName] = useState()\n    const [username, setUsername] = useState()\n    const [userChanges, setUserChanges] = useState(false)\n    const [usernameTaken, setUsernameTaken] = useState(null)\n    const [delModal, setDelModal] = useState(false)\n    useEffect(()=>{\n        let userJWT = localStorage.getItem('accessToken')\n        if(verify(userJWT, 'thisisafakecookie')){\n        setUser(decode(userJWT))\n        setLogged(true)\n        }else{\n            router.push('/404')\n        }\n        const fetchData = async () =>{\n            let currentUser = decode(localStorage.getItem('accessToken'))\n            const profileUserRes = await fetch(`http://localhost:4001/user/profile/${currentUser.id}`)\n            const profileUserData = await profileUserRes.json()\n            console.log(profileUserData.result)\n            setFirstName(profileUserData.result[0].first_name)\n            setLastName(profileUserData.result[0].last_name)\n            setUsername(profileUserData.result[0].username)\n        }\n        fetchData()\n    },[])\n\n\n\n    const handleFNameChange = (e)=>{\n        if(firstName === e.target.value){\n            return\n        }\n        setUserChanges(true)\n        setFirstName(e.target.value)\n    }\n\n    const handleLNameChange = (e)=>{\n        if(LastName === e.target.value){\n            return\n        }\n        setUserChanges(true)\n        setLastName(e.target.value)\n    }\n\n\n    const handleUsername = () =>{\n        setUserChanges(true)\n    }\n\n    axios.get(`http://localhost:4001/user/username/${username}`)\n    .then((res)=>{\n        if(res.data.result.length === 0){\n            setUsernameTaken(false)\n        }else{\n            setUsernameTaken(true)\n        }\n    })\n\n    const updateSettings = (e)=>{\n        if(firstName === '' || lastName === '' || username === ''){\n            return \n        }\n        axios.patch(`http://localhost:4001/user/settings/${firstName}/${lastName}/${username}/${user.id}`)\n            .then((res)=>{\n                router.reload()\n        })\n    }\n\n    const takeToProfile = () =>{\n        router.push(`/profile/${user.id}`)\n    }\n\n    const handleUserDelete = (userId) =>{\n        axios.delete(`http://localhost:4001/user/delete/${userId}`)\n            .then(()=>{\n                localStorage.clear()\n                router.push('/')\n            })\n    }\n\n  return (\n    <Container>\n        <Navbar user = {user} signed = {logged}/>\n        <Layout>\n            <Wrapper>\n                <UserTop>\n                    <UserTopWrapper>\n                        <UserTopHeading>Settings</UserTopHeading>\n                        <UserTopEmail>eds232323@gmail.com</UserTopEmail>\n                    </UserTopWrapper>\n                    <UserTopViewProfile onClick = {()=>takeToProfile()}>\n                        View Profile\n                    </UserTopViewProfile>\n                </UserTop>\n                <Settings>\n                        <FlexRow>\n                            <UsernameHeading>Username</UsernameHeading>\n                            <FlexCol>\n                                <Username value = {username} onChange = {event => setUsername(event.target.value)} onKeyDown = {handleUsername}/>\n                                {usernameTaken ? \n                                    <UsernameError error = \"true\">Username already exists!</UsernameError>\n                                :\n                                    <UsernameError error = \"false\">Username is available</UsernameError>\n                                }\n                            </FlexCol>\n                        </FlexRow>\n                        <SettingsWrapper>\n                            <NameHeading>Your name</NameHeading>\n                            <NameWrapper>\n                                <FirstName value = {firstName} onChange = {(e)=>handleFNameChange(e)}/>\n                                <LastName value = {lastName} onChange = {(e)=>handleLNameChange(e)}/>\n                            </NameWrapper>\n                        </SettingsWrapper>\n                        <ButtonsWrapper>\n                            <SaveChanges disabled={!userChanges} onClick = {()=>updateSettings()}>Save my changes</SaveChanges>\n                            <DeleteAccount onClick = {()=>setDelModal(!delModal)}>Delete my account</DeleteAccount>\n                        </ButtonsWrapper>\n                </Settings>\n            </Wrapper>\n            {delModal && (\n                <DeleteConfirmation>\n                    <DeleteConfirmationWrapper> \n                    <DeleteHeading>Are you sure you want to delete your account? All your blogs & blogs will be removed forver.</DeleteHeading>\n                    <DeleteButton onClick = {()=>handleUserDelete(user.id)}>\n                        <FontAwesomeIcon icon = {faDeleteLeft}></FontAwesomeIcon>\n                            Delete my account\n                    </DeleteButton>\n                    </DeleteConfirmationWrapper>\n                </DeleteConfirmation>\n            )}\n        </Layout>\n    </Container>\n  )\n}\n\nexport default UserSettings\n\n// export async function getServerSideProps(context) {\n//     const jwt = context.req.cookies.userToken\n//     try{\n//         verify(jwt, process.env.JWT_SECRET)\n//         const user = decode(jwt)\n//         const profileUserRes = await fetch(`http://localhost:4001/user/profile/${user.id}`)\n//         const profileUserData = await profileUserRes.json()\n\n//         return {props:{user: profileUserData.result,currentUser: user, logged:true}}\n//     }catch(error){\n//         return {\n//             redirect: {\n//                 permanent: false,\n//                 destination: \"/404\"\n//             }\n//         }\n//     }\n// }","/Users/eduardos/blogCRUD/client/pages/user/signup.js",["164"],[],"/Users/eduardos/blogCRUD/client/components/comments/comments.js",[],[],"/Users/eduardos/blogCRUD/client/components/comments/comments.styles.js",[],[],"/Users/eduardos/blogCRUD/client/components/editorspicks/editorspicks.js",[],[],"/Users/eduardos/blogCRUD/client/components/editorspicks/editorspicks.styles.js",[],[],"/Users/eduardos/blogCRUD/client/components/footer/Footer.jsx",[],[],"/Users/eduardos/blogCRUD/client/components/footer/Footer.styles.jsx",[],[],"/Users/eduardos/blogCRUD/client/components/hero/hero.js",[],[],"/Users/eduardos/blogCRUD/client/components/hero/hero.styles.js",[],[],"/Users/eduardos/blogCRUD/client/components/index.js",[],[],"/Users/eduardos/blogCRUD/client/components/latestarticles/latestArticles.js",[],[],"/Users/eduardos/blogCRUD/client/components/latestarticles/latestArticles.styles.js",[],[],"/Users/eduardos/blogCRUD/client/components/navbar/Navbar.jsx",["165","166"],[],"import tw from \"tailwind-styled-components/dist/tailwind\"\nimport Link from 'next/link'\nimport { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome, faBook, faRibbon,faUser, faSignOut,faQuestionCircle, faSignIn, faDashboard, faGears, faPen, faSignOutAlt, faSign} from '@fortawesome/free-solid-svg-icons'\nimport axios from \"axios\"\nimport { useRouter } from \"next/router\"\nimport {verify,decode} from 'jsonwebtoken'\naxios.defaults.withCredentials = true\n\nconst Container = tw.section`\nw-[100vw]\nh-[75px]\nrelative\nz-[909999]\nbg-gray-100\n`\n\nconst Layout = tw.div`\nmax-w-[1280px]\nh-full\nmx-auto\npx-[15px]\n`\n\nconst Wrapper = tw.div`\nw-full\nh-full\nmd:flex\nmd:justify-between\nmd:items-center\nrelative\n`\n\nconst Logo = tw.div`\ntext-2xl\nfont-bold\nitems-center\nmd:items-start\nmd:justify-self-start\nmd:block\nmd:w-auto\nmd:h-auto\nflex\nw-full\nh-full\nitems-center\njustify-center\ncursor-pointer\n`\n\nconst Nav = tw.nav`\nmd:h-full\nmd:flex\nmd:items-center\nmd:justify-center\nhidden\n`\n\nconst Item = tw.li`\nflex\njustify-center\nitems-center\ngap-x-10\ntext-[14px]\nh-full\n`\n\nconst User = tw.div`\nrelative\n`\nconst Image = tw.div`\nw-[40px]\nh-[40px]\nbg-gray-500\nrounded-full\ncursor-pointer\n`\n\nconst UserSettings = tw.div`\nabsolute\nw-[250px]\nbg-gray-200\nshadow-xl\nright-0\nrounded-xl\n${(p)=> p.display === \"true\" ? \"flex\" : \" hidden\"}\nflex-col\n`\n\nconst LinkName = tw.a`\npy-[5px]\npx-[3px]\nrelative\ntext-center\njustify-center\nitems-center\n${(p) => p.active === \"true\" ? \n`\n  text-indigo-700\n  font-bold\n  after:content-['']\n  after:absolute\n  after:h-[3px]\n  after:left-0\n  after:right-0\n  after:bg-indigo-700\n  after:rounded-full\n  after:left-0\n  after:bottom-0\n`\n:  \n`\n  text-gray-400\n  after:content-['']\n  after:absolute\n  after:h-[3px]\n  after:w-[0%]\n  after:bg-gray-400/50\n  after:rounded-full\n  after:left-0\n  after:bottom-0\n  after:transition-all\n  hover:after:w-[100%]\n`\n}\ncursor-pointer\n`\n\nconst Button = tw.button`\nw-[100px]\npy-[10px]\nbg-indigo-700\ntext-white\nrounded-lg\nhover:bg-indigo-800\nactive:bg-indigo-900\n`\n\nconst Hamburger = tw.div`\ncursor-pointer\nmd:hidden\nabsolute\ntop-[50%]\ntranslate-y-[-50%]\nright-0\nz-10\n`\n\nconst Line = tw.div`\nw-[26px]\nh-[3.5px]\nbg-black\nmy-[10px]\nrounded-full\n`\n\nconst MobNav = tw.div`\nw-[50%]\nbg-gray-200\nfixed\ntop-0\nbottom-0\nright-0\npx-[15px]\npy-[75px]\nmd:hidden\nz-[2]\n`\n\nconst MobItems = tw.nav`\nflex\nflex-col\njustify-evenly\nw-full\nh-full\n`\n\nconst MobLinkName = tw.a`\ntext-black\npy-[15px]\npx-[10px]\nw-full\nfont-bold\nrounded-lg\nflex\nitems-center\ngap-x-[10px]\ntext-xl\nhover:bg-gray-300\ntransition\ncursor-pointer\n`\n\nconst MobButton = tw.button`\npy-[15px]\npx-[10px]\ntext-white\nfont-bold\nrounded-lg\nflex\nitems-center\ngap-x-[10px]\ntext-xl\nbg-indigo-600\nhover:bg-indigo-700\nactive:bg-indigo-800\n`\n\nconst FlexRowWrap = tw.div`\nflex\nitems-center\njustify-start\ngap-x-3\nborder-gray-400/30\np-[15px]\nhover:bg-gray-400/30\ncursor-pointer\nrounded-xl\ngroup\n`\n\nconst Username = tw.p`\ntext-black\n`\n\nconst FlexCol = tw.div`\nflex\nflex-col\n`\n\nconst TextWrapper = tw.p`\ntext-md\nflex\nitems-center\njustify-center\ngap-x-3\ntext-black\n`\n\nconst Anchor = tw.a`\nw-full\ngap-x-4\nflex\nitems-center\njustify-center\n`\n\n\n\nconst Navbar = ({user,signed, page,currentUser}) => {\n  const router = useRouter();\n  const [mobNav, setMobNav] = useState(false)\n  const [userDash, setUserDash] = useState(false)\n\n  const signOut = async () =>{\n    localStorage.removeItem('accessToken')\n    router.push('/')\n  }\n\n  const takeToProfile = () =>{\n    router.push(`/profile/${user.id}`)\n  }\n\n\n\n  return (\n    <Container>\n      <Layout>\n        <Wrapper>\n          <Link href = \"/\">\n            <Logo>Blog.</Logo>\n          </Link>\n          <Nav>\n            <Item>\n              <Link href = \"/\"><LinkName active = {page === 'home' ? \"true\" : \"false\"}>Home</LinkName></Link>\n              <Link href = \"/blog/all\"><LinkName active = {page === \"blogAll\" ? \"true\" : \"false\"}>Blog</LinkName></Link>\n              {/* extra options for users that are signed in */}\n              {signed ? \n                <>\n                  <Link href = \"/user/bookmarks\"><LinkName active = {page === 'bookmarks' ? \"true\" : \"false\"}>Bookmarks</LinkName></Link>\n                  {user.role === \"admin\" && (\n                    <Link href = \"/admin\"><LinkName active = {page === 'admins' ? 'true' : 'false'}>Admins</LinkName></Link>\n                  )}\n                  {/* When users click on their profile picture, allow them to view extra options */}\n                  <User>\n                    <Image onClick = {()=>setUserDash(!userDash)}></Image>\n                    <UserSettings display = {userDash.toString()}>\n                      <FlexRowWrap onClick = {()=> takeToProfile()}>\n                        <Image></Image>\n                        <Username>My profile</Username>\n                      </FlexRowWrap>\n                      <FlexCol>\n                        <FlexRowWrap>\n                          <TextWrapper>\n                            <Link href = \"/user/blogs\">\n                              <Anchor>  \n                                <FontAwesomeIcon icon = {faBook}></FontAwesomeIcon>\n                                My blogs\n                              </Anchor>\n                            </Link>\n                          </TextWrapper>\n                        </FlexRowWrap>\n                        <FlexRowWrap>\n                          <TextWrapper>\n                            <Link href = \"/blog/create\">\n                              <Anchor>\n                                <FontAwesomeIcon icon = {faPen}></FontAwesomeIcon>\n                                Write new blog\n                              </Anchor>\n                            </Link>\n                          </TextWrapper>\n                        </FlexRowWrap>\n                        <FlexRowWrap>\n                          <TextWrapper>\n                            <Link href = \"/user/settings\">\n                              <Anchor>\n                                <FontAwesomeIcon icon = {faGears}></FontAwesomeIcon>\n                                Settings\n                              </Anchor>\n                            </Link>\n                          </TextWrapper>\n                        </FlexRowWrap>\n                        <FlexRowWrap>\n                          <TextWrapper onClick = {()=> signOut()}>\n                            <FontAwesomeIcon icon = {faSignOutAlt}></FontAwesomeIcon>\n                            Signout\n                          </TextWrapper>\n                        </FlexRowWrap>\n                      </FlexCol>\n                    </UserSettings>\n                  </User>\n                </>\n              :\n                <>\n                  {/* <Link href = \"/about\"><LinkName>About</LinkName></Link> */}\n                  <Link href = \"/user/login\"><Button>Get started</Button></Link>\n                </>\n              }\n            </Item>\n          </Nav>\n          {/* Mobile navigation */}\n          <Hamburger onClick = {()=>setMobNav(!mobNav)}>\n            <Line></Line>\n            <Line></Line>\n          </Hamburger>\n          {mobNav && (\n            <MobNav>\n              <MobItems>\n                <Link href = \"/\">\n                  <MobLinkName>\n                    <FontAwesomeIcon icon = {faHome}></FontAwesomeIcon>\n                    Home\n                  </MobLinkName>\n                </Link>\n                <Link href = \"/blog/all\">\n                  <MobLinkName>\n                    <FontAwesomeIcon icon = {faBook}></FontAwesomeIcon>\n                    Blog\n                  </MobLinkName>\n                </Link>\n                {signed ? \n                  <>\n                    <Link href = \"/user/bookmarks\">\n                      <MobLinkName>\n                        <FontAwesomeIcon icon = {faRibbon}></FontAwesomeIcon>\n                        Bookmarks\n                      </MobLinkName>\n                    </Link>\n                    {user.role === \"admin\" && (\n                      <Link href = \"/admin\">\n                        <MobLinkName>\n                          <FontAwesomeIcon icon = {faDashboard}></FontAwesomeIcon>\n                          Admins\n                        </MobLinkName>\n                      </Link>\n                    )}\n                    <Link href = \"/user/profile\">\n                      <MobLinkName>\n                        <FontAwesomeIcon icon = {faUser}></FontAwesomeIcon>\n                        Profile\n                      </MobLinkName>\n                    </Link>\n                    <Link href = \"/\">\n                      <MobButton>\n                        <FontAwesomeIcon icon = {faSignOut}></FontAwesomeIcon>\n                        Signout\n                      </MobButton>\n                    </Link>\n                  </>\n                :\n                  <>\n                  <Link href = \"/about\">\n                      <MobLinkName>\n                        <FontAwesomeIcon icon = {faQuestionCircle}></FontAwesomeIcon>\n                        About\n                      </MobLinkName>\n                    </Link>\n                    <Link href = \"/user/login\">\n                      <MobButton>\n                        <FontAwesomeIcon icon = {faSignIn}></FontAwesomeIcon>\n                        Login\n                      </MobButton>\n                    </Link>\n                  </>\n                }\n              </MobItems>\n            </MobNav>\n          )}\n\n        </Wrapper>\n      </Layout>\n    </Container>\n  )\n}\n\nexport default Navbar\n","/Users/eduardos/blogCRUD/client/components/navbar/Navbar.styles.jsx",[],[],"/Users/eduardos/blogCRUD/client/components/navbarstudio/navbarstudio.js",[],[],{"ruleId":"167","severity":1,"message":"168","line":231,"column":7,"nodeType":"169","endLine":231,"endColumn":9,"suggestions":"170"},{"ruleId":"167","severity":1,"message":"171","line":381,"column":5,"nodeType":"169","endLine":381,"endColumn":7,"suggestions":"172"},{"ruleId":"167","severity":1,"message":"173","line":280,"column":5,"nodeType":"169","endLine":280,"endColumn":7,"suggestions":"174"},{"ruleId":"167","severity":1,"message":"173","line":148,"column":5,"nodeType":"169","endLine":148,"endColumn":7,"suggestions":"175"},{"ruleId":"167","severity":1,"message":"173","line":20,"column":5,"nodeType":"169","endLine":20,"endColumn":7,"suggestions":"176"},{"ruleId":"167","severity":1,"message":"173","line":271,"column":7,"nodeType":"169","endLine":271,"endColumn":9,"suggestions":"177"},{"ruleId":"167","severity":1,"message":"173","line":18,"column":5,"nodeType":"169","endLine":18,"endColumn":7,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":287,"column":21,"nodeType":"181","endLine":287,"endColumn":67},{"ruleId":"179","severity":1,"message":"180","line":290,"column":25,"nodeType":"181","endLine":290,"endColumn":32},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'editBlog.data' and 'router'. Either include them or remove the dependency array.","ArrayExpression",["182"],"React Hook useEffect has a missing dependency: 'id.data'. Either include it or remove the dependency array.",["183"],"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["184"],["185"],["186"],["187"],["188"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"193","fix":"195"},{"desc":"193","fix":"196"},{"desc":"193","fix":"197"},{"desc":"193","fix":"198"},"Update the dependencies array to be: [editBlog.data, router]",{"range":"199","text":"200"},"Update the dependencies array to be: [id.data]",{"range":"201","text":"202"},"Update the dependencies array to be: [router]",{"range":"203","text":"204"},{"range":"205","text":"204"},{"range":"206","text":"204"},{"range":"207","text":"204"},{"range":"208","text":"204"},[3321,3323],"[editBlog.data, router]",[5451,5453],"[id.data]",[3946,3948],"[router]",[2754,2756],[607,609],[4436,4438],[515,517]]